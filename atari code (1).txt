import java.awt.*;
import java.awt.event.*;
import java.util.concurrent.TimeUnit;

import javax.swing.*;

public class Main implements ActionListener {
	boolean win=true;
	JFrame frame;
	JButton retry = new JButton("Retry");
	JButton exit = new JButton("Exit");
	int x=3,y=40,z=40,t=40;
	int xb=(int)( Math.random()*450),yb=3,rb=30;
	int points=0,speed;
	JPanel p;
	draw pan;
	
	public static void main(String[] args) {
		new Main().go();
	}
	
	
	public void go(){
		pan = new draw();
		p=new JPanel();
		frame = new JFrame();
		frame.setSize(505,500);
		frame.addKeyListener(new key());
		frame.setFocusable(true);
		frame.setFocusTraversalKeysEnabled(false);
		frame.getContentPane().add(BorderLayout.CENTER,pan);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		start();
		
		
	}
	
	public void actionPerformed(ActionEvent e){
		frame.setVisible(false);
		Runnable r = new guirun();
		Thread t = new Thread(r);
		t.start();
		
	}
	
	public void start(){
		p.removeAll();
		frame.getContentPane().remove(p);
		SwingUtilities.updateComponentTreeUI(frame);
		x=3;y=40;z=40;t=40;
		 win=true;
		 xb=(int)( Math.random()*450);yb=3;rb=30;
		 points=0;speed=8;
		boolean upl=false,downl=false,downr=true,upr=false;
		frame.repaint();
		while(win){
			if(downr){
				downr=false;
				while(xb<460 && yb<390 && win){
					xb++; yb++;
					frame.repaint();
					if(xb==460 && yb<390)
						downl=true;
					if(yb==390 && xb<460){
						if(xb+5>=x-10 && xb<=x+150){
							upr=true;
							points++;
							if(speed>2)
							speed--;
							}
							else{
								while(yb<=460){
								xb++;
								yb++;
								frame.repaint();
								try{
									Thread.sleep(speed);
								}catch(Exception ex){
									ex.printStackTrace();
								}
								}
								win=false;
								break;
							}}
					if(yb==390 && xb==460){
						if(xb+5>=x-10 && xb<=x+150){
							upl=true;
							points++;
							if(speed>2)
							speed--;
							}
							else{
								while(yb<=460){
								xb++;
								yb++;
								frame.repaint();
								try{
									Thread.sleep(speed);
								}catch(Exception ex){
									ex.printStackTrace();
								}
								}
								win=false;
								break;
							}}
					try{
						Thread.sleep(speed);
					}catch(Exception ex){
						ex.printStackTrace();
					}
				}
			}
			if(downl){
				downl=false;
				while(xb>2 && yb<390 && win){
					xb--; yb++;
					frame.repaint();
					if(xb==2 && yb<390)
						downr=true;
					if(yb==390 && xb>2){
						if(xb+5>= (x-10) && xb<=(x+150)){
						upl=true;
						points++;
						if(speed>2)
						speed--;
						}
						else{
							while(yb<=460){
								xb--;
								yb++;
								frame.repaint();
								try{
									Thread.sleep(speed);
								}catch(Exception ex){
									ex.printStackTrace();
								}
								}

							win=false;
							break;
						}}
					if(yb==390 && xb==2){
						if(xb+5>= (x-10) && xb<=(x+150)){
						upr=true;
						points++;
						if(speed>2)
						speed--;
						}
						else{
							while(yb<=460){
								xb--;
								yb++;
								frame.repaint();
								try{
									Thread.sleep(speed);
								}catch(Exception ex){
									ex.printStackTrace();
								}
								}

							win=false;
							break;
						}}
					try{
						Thread.sleep(speed);
					}catch(Exception ex){
						ex.printStackTrace();
					}
				}
			}
			if(upl){
				upl=false;
				while(xb>2 && yb>2){
					xb--; yb--;
					frame.repaint();
					if(xb==2 && yb>2)
						upr=true;
					if(yb==2 && xb>2)
						downl=true;
					if(xb==2 && yb==2)
						downr=true;
					try{
						Thread.sleep(speed);
					}catch(Exception ex){
						ex.printStackTrace();
					}
				}
			}
			if(upr){
				upr=false;
				while(xb<460 && yb>2){
					xb++; yb--;
					frame.repaint();
					if(xb==460 && yb>2)
						upl=true;
					if(yb==2 && xb<460)
						downr=true;
					if(xb==460&&yb==2)
						downl=true;
					try{
						Thread.sleep(speed);
					}catch(Exception ex){
						ex.printStackTrace();
					}
				}
			}
			try{
				Thread.sleep(speed);
			}catch(Exception ex){
				ex.printStackTrace();
			}
		}
		if(!win){
			frame.repaint();
			retry.addActionListener(this);
			exit.addActionListener(new exit());
			p.add(retry);
			p.add(exit);
			frame.getContentPane().add(BorderLayout.SOUTH,p);
			SwingUtilities.updateComponentTreeUI(frame);
		}
		
	}
	
	public class exit implements ActionListener{

		public void actionPerformed(ActionEvent e) {
			frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
			
		}
	}
		
	
	public class draw extends JPanel{
		public void paintComponent(Graphics g){
			if(win){
			g.setColor(getBackground());
			g.fillRect(0, 0, this.getWidth(), this.getHeight());
			Color c = new Color(100,200,30);
			g.setColor(c);
			g.fillRoundRect(x,420, 150, 30, 30,35 );
			c=new Color(255,0,0);
			g.setColor(c);
			g.fillOval(xb, yb, rb, rb);
			//g.drawLine(0,390,460,390);
			//g.drawLine(x+150, 420, x+150, 420+30);
			}
			else{
				String p=null;
				p=String.format("GAME OVER!\n Your Points: %d", points);
				Font font = new Font("serif",Font.PLAIN,25);
				g.setFont(font);
				g.drawString(p,50,150);
			}
			}

	}
	public class key implements KeyListener{

		@Override
		public void keyTyped(KeyEvent e) {
			
			
		}

		@Override
		public void keyPressed(KeyEvent e) {
				int keycode=e.getKeyCode();
				for(int i=0;i<20;i++){
				switch(keycode){
				case KeyEvent.VK_LEFT:
					if(x<=0)
						return;
						x--;
						frame.repaint();
						frame.setFocusable(true);
					break;
				case KeyEvent.VK_RIGHT:
					if(x>=340)
						return;
						x++;
						frame.repaint();
						frame.setFocusable(true);	
					
					break;
				default: break;
				}
			}
			
		}


		public void keyReleased(KeyEvent e) {
			int keycode=e.getKeyCode();
			for(int i=0;i<20;i++){
			switch(keycode){
			case KeyEvent.VK_LEFT:
				if(x<=0)
					return;
					x--;
					frame.repaint();
					frame.setFocusable(true);
				break;
			case KeyEvent.VK_RIGHT:
				if(x>=340)
					return;
					x++;
					frame.repaint();
					frame.setFocusable(true);	
				
				break;
			default: break;
			}
		}
		
		}
		
	}
	
}





public class guirun implements Runnable {
	public void run(){
		new Main().go();
	}

}

